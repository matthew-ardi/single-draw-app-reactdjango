{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["generator","rough","createElement","id","x1","y1","x2","y2","tool","color","roughElement","rectangle","fill","nearPoint","x","y","name","Math","abs","positionWithinElement","element","isTopLeft","isTopRight","isBottomLeft","isBottomRight","a","b","c","offset","distance","start","end","inside","sqrt","pow","getElementAtPosition","elements","map","position","find","App","useState","setElements","action","setAction","setTool","selectedElement","setSelectedElement","selectModeElements","savedElements","setSavedElements","drawingName","setDrawingName","editDrawing","setEditDrawing","getSaved","setGetSaved","openDrawing","event","clearElements","retrievedElement","target","value","saveId","console","log","savedItems","item","index","Button","variant","type","onClick","editModeVisual","saveName","saveDrawings","editVisual","preventDefault","drawingIndex","length","prevState","useLayoutEffect","canvas","document","getElementById","getContext","clearRect","width","height","roughCanvas","forEach","draw","updateElement","clientX","clientY","updatedElement","elementsCopy","adjustElementCoordinates","min","max","style","checked","onChange","htmlFor","filter","onSubmit","axios","get","then","res","data","catch","err","window","innerWidth","innerHeight","onMouseDown","offsetX","offsetY","onMouseMove","cursor","cursorForPosition","offsetWidth","offsetHeight","coordinates","resizedCoordinates","onMouseUp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.cb383837.chunk.js","sourcesContent":["import React, { useLayoutEffect, useState } from \"react\";\nimport rough from \"roughjs/bundled/rough.esm\";\nimport ReactDOM from \"react-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport axios from \"axios\";\n\nconst generator = rough.generator();\n\nfunction createElement(id, x1, y1, x2, y2, tool, color) {\n  const roughElement = generator.rectangle(x1, y1, x2 - x1, y2 - y1, {\n    fill: color,\n  });\n  return { id, x1, y1, x2, y2, tool, roughElement };\n}\n\nconst nearPoint = (x, y, x1, y1, name) => {\n  return Math.abs(x - x1) < 5 && Math.abs(y - y1) < 5 ? name : null;\n};\n\n// const drawCorner = (element) => {\n//   const { x1, y1, x2, y2 } = element;\n//   const tl = { id: 1, x1: x1 - 8, y1: y1 - 8, x2: x1 - 1, y2: y1 - 1 };\n//   const tr = { id: 2, x1: x1 + 8, y1: y1 + 8, x2: x1 + 1, y2: y1 + 1 };\n//   return { tl, tr };\n// };\n\nconst cursorForPosition = (position) => {\n  switch (position) {\n    case \"tl\":\n    case \"br\":\n    case \"start\":\n    case \"end\":\n      return \"nwse-resize\";\n    case \"tr\":\n    case \"bl\":\n      return \"nesw-resize\";\n    default:\n      return \"move\";\n  }\n};\n\nconst resizedCoordinates = (clientX, clientY, position, coordinates) => {\n  const { x1, y1, x2, y2 } = coordinates;\n  switch (position) {\n    case \"tl\":\n    case \"start\":\n      return { x1: clientX, y1: clientY, x2, y2 };\n    case \"tr\":\n      return { x1, y1: clientY, x2: clientX, y2 };\n    case \"bl\":\n      return { x1: clientX, y1, x2, y2: clientY };\n    case \"br\":\n    case \"end\":\n      return { x1, y1, x2: clientX, y2: clientY };\n    default:\n      return null;\n  }\n};\n\nconst isWithinElement = (x, y, element) => {\n  const { x1, x2, y1, y2 } = element;\n  const minX = Math.min(x1, x2);\n  const maxX = Math.max(x1, x2);\n  const minY = Math.min(y1, y2);\n  const maxY = Math.max(y1, y2);\n  return x >= minX && x <= maxX && y >= minY && y <= maxY;\n};\n\nconst positionWithinElement = (x, y, element) => {\n  const { x1, x2, y1, y2, tool } = element;\n  // const minX = Math.min(x1, x2);\n  // const maxX = Math.max(x1, x2);\n  // const minY = Math.min(y1, y2);\n  // const maxY = Math.max(y1, y2);\n  if (tool === \"Select\") {\n    const isTopLeft = nearPoint(x, y, x1, y1, \"tl\");\n    const isTopRight = nearPoint(x, y, x2, y1, \"tr\");\n    const isBottomLeft = nearPoint(x, y, x1, y2, \"bl\");\n    const isBottomRight = nearPoint(x, y, x2, y2, \"br\");\n\n    const isInside = x >= x1 && x <= x2 && y >= y1 && y <= y2 ? \"inside\" : null;\n    return isTopLeft || isInside || isTopRight || isBottomLeft || isBottomRight;\n  } else {\n    const a = { x: x1, y: y1 };\n    const b = { x: x2, y: y2 };\n    const c = { x, y };\n    const offset = distance(a, b) - (distance(a, c) + distance(b, c));\n    const start = nearPoint(x, y, x1, y1, \"start\");\n    const end = nearPoint(x, y, x2, y2, \"end\");\n    const inside = Math.abs(offset) < 1 ? \"inside\" : null;\n    return start || end || inside;\n  }\n};\n\nconst distance = (a, b) =>\n  Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));\n\nconst getElementAtPosition = (x, y, elements) => {\n  // return elements.find((element) => isWithinElement(x, y, element));\n  return elements\n    .map((element) => ({\n      ...element,\n      position: positionWithinElement(x, y, element),\n    }))\n    .find((element) => element.position !== null);\n};\n\nconst App = () => {\n  const [elements, setElements] = useState([]);\n  const [action, setAction] = useState(\"none\");\n  const [tool, setTool] = useState(\"Move\");\n  const [selectedElement, setSelectedElement] = useState(null);\n  const [selectModeElements, setSelectModeElements] = useState([]);\n  const [savedElements, setSavedElements] = useState([]); // [[saveId, saveName, [cornersObject]]]\n  const [drawingName, setDrawingName] = useState(null);\n  const [editDrawing, setEditDrawing] = useState(null);\n  const [getSaved, setGetSaved] = useState([]); // {saveId, saveName, corners, username}\n\n  function getSavedElements() {\n    axios\n      .get(\"api/drawings\")\n      .then((res) => setGetSaved(res.data))\n      .catch((err) => console.log(err));\n    console.log(getSaved);\n  }\n\n  function openDrawing(event) {\n    //open drawing\n    clearElements();\n    const retrievedElement = savedElements.find(\n      (savedElements) => savedElements[0] == event.target.value\n    );\n    // console.log(retrievedElement[2]);\n    const saveId = retrievedElement[0];\n    console.log(saveId);\n    setElements(retrievedElement[2]);\n    setSelectedElement(null);\n    setEditDrawing(saveId);\n  }\n  const savedItems = savedElements.map((item, index) => (\n    <div>\n      <li key={index}>{item[1]}</li>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        type=\"Button\"\n        id=\"open\"\n        value={item[0]}\n        onClick={openDrawing}\n      >\n        Open\n      </Button>\n    </div>\n  ));\n\n  function editVisual() {\n    if (editDrawing !== null) {\n      const saveId = editDrawing;\n      const saveName = savedElements[saveId][1];\n      return (\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"Button\"\n          id=\"saveEdit\"\n          onClick={saveDrawings}\n        >\n          Save {saveName}\n        </Button>\n      );\n    } else {\n      return <div></div>;\n    }\n  }\n  const editModeVisual = editVisual();\n\n  // function editModeVisual() {\n  //   if (editDrawing) {\n  //     return <editVisual />;\n  //   }\n\n  function handleInputChange(event) {\n    setDrawingName(event.target.value);\n  }\n  function saveDrawings(event) {\n    event.preventDefault();\n    const drawingIndex = savedElements.length;\n    if (elements && editDrawing === null) {\n      setSavedElements((prevState) => [\n        ...prevState,\n        [drawingIndex, drawingName, elements],\n      ]);\n    } else if (elements && editDrawing !== null) {\n      const saveId = editDrawing;\n      savedElements[saveId][2] = elements;\n    }\n  }\n\n  function clearElements() {\n    setElements([]);\n    setSelectedElement([]);\n    setEditDrawing(null);\n  }\n\n  function deleteElement() {\n    if (selectedElement && elements) {\n      const { id } = selectedElement;\n      const elementsCopy = elements.filter((item) => item.id !== id);\n      // elementsCopy = elementsCopy.splice(id, 1);\n      setElements(elementsCopy);\n    }\n  }\n\n  useLayoutEffect(() => {\n    const canvas = document.getElementById(\"canvas\");\n    const context = canvas.getContext(\"2d\");\n\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    const roughCanvas = rough.canvas(canvas);\n    const rect = generator.rectangle(100, 100, 150, 150);\n    // roughCanvas.draw(rect);\n    elements.forEach(({ roughElement }) => roughCanvas.draw(roughElement));\n    selectModeElements.forEach(({ roughElement }) =>\n      roughCanvas.draw(roughElement)\n    );\n  }, [elements]);\n\n  const updateElement = (id, x1, y1, clientX, clientY, color) => {\n    const updatedElement = createElement(\n      id,\n      x1,\n      y1,\n      clientX,\n      clientY,\n      tool,\n      color\n    );\n    const elementsCopy = [...elements];\n    elementsCopy[id] = updatedElement;\n    setElements(elementsCopy);\n  };\n\n  const updateSelectElement = (id, x1, y1, clientX, clientY) => {\n    const updatedElement = createElement(id, x1, y1, clientX, clientY, tool);\n    const elementsCopy = [...selectModeElements];\n    elementsCopy[id] = updatedElement;\n    setSelectModeElements(elementsCopy);\n  };\n\n  const adjustElementCoordinates = (element) => {\n    const { x1, y1, x2, y2, tool } = element;\n    if (tool === \"draw\") {\n      const minX = Math.min(x1, x2);\n      const maxX = Math.max(x1, x2);\n      const minY = Math.min(y1, y2);\n      const maxY = Math.max(y1, y2);\n      return { x1: minX, x2: maxX, y1: minY, y2: maxY };\n    } else {\n      if (x1 < x2 || (x1 === x2 && y1 < y2)) {\n        return { x1, y1, x2, y2 };\n      } else {\n        return { x1: x2, y1: y2, x2: x1, y2: y1 };\n      }\n    }\n  };\n\n  /**\n   *\n   * Mouse Handler definitions\n   */\n  const handleMouseDown = (event) => {\n    const { clientX, clientY } = event;\n    if (selectedElement && elements.length !== 0) {\n      const { id } = selectedElement;\n      const { x1, y1, x2, y2 } = adjustElementCoordinates(elements[id]);\n      updateElement(id, x1, y1, x2, y2, \"\");\n    }\n    // if (tool === \"Move\" || tool === \"Select\") {\n    if (tool === \"Select\") {\n      const element = getElementAtPosition(clientX, clientY, elements);\n      if (element) {\n        const offsetX = clientX - element.x1;\n        const offsetY = clientY - element.y1;\n        setSelectedElement({ ...element, offsetX, offsetY });\n\n        // if (selectedElement && selectModeElements.length === 0) {\n        //   const { id } = selectedElement;\n        //   const corners = drawCorner(elements[id]);\n        //   console.log(corners);\n        //   const newId = selectModeElements.length;\n        //   corners.map(({ id, x1, y1, x2, y2 }) =>\n        //     setSelectModeElements(\n        //       createElement(id, x1, y1, x2, y2, tool, action)\n        //     )\n        //   );\n        //   // const cornerElement = createElement(\n        //   //   newId,\n        //   //   x1,\n        //   //   y1,\n        //   //   x2,\n        //   //   y2,\n        //   //   tool,\n        //   //   action\n        //   // );\n        //   // setSelectModeElements(cornerElement);\n        // }\n        // setAction(\"moving\");\n        if (element.position === \"inside\") {\n          setAction(\"moving\");\n        } else {\n          setAction(\"resizing\");\n          // setSelectModeElements([]);\n        }\n      } else {\n        if (selectedElement) {\n          const { id } = selectedElement;\n          const { x1, y1, x2, y2 } = adjustElementCoordinates(elements[id]);\n          updateElement(id, x1, y1, x2, y2, \"\");\n        }\n        setSelectedElement(null);\n        // setSelectModeElements([]);\n      }\n\n      //moving\n    } else if (tool === \"draw\") {\n      setAction(\"drawing\");\n      const id = elements.length;\n      const element = createElement(\n        id,\n        clientX,\n        clientY,\n        clientX,\n        clientY,\n        tool,\n        \"\"\n      );\n      setElements((prevState) => [...prevState, element]);\n      setSelectedElement(element);\n    }\n  };\n  const handleMouseMove = (event) => {\n    const { clientX, clientY } = event;\n    if (tool === \"Select\") {\n      const element = getElementAtPosition(clientX, clientY, elements);\n      event.target.style.cursor = element\n        ? cursorForPosition(element.position)\n        : \"default\";\n    }\n    if (action === \"drawing\") {\n      const index = elements.length - 1;\n      const { x1, y1 } = elements[index];\n      updateElement(index, x1, y1, clientX, clientY, \"\");\n    } else if (action === \"moving\") {\n      // move drawed shape\n      const { id, x1, x2, y1, y2, offsetX, offsetY } = selectedElement;\n      // const {\n      //   id_corner,\n      //   x1_corner,\n      //   x2_corner,\n      //   y1_corner,\n      //   y2_corner,\n      // } = selectModeElements;\n      const width = x2 - x1;\n      const height = y2 - y1;\n      const offsetWidth = clientX - offsetX;\n      const offsetHeight = clientY - offsetY;\n\n      updateElement(\n        id,\n        offsetWidth,\n        offsetHeight,\n        offsetWidth + width,\n        offsetHeight + height,\n        \"red\"\n      );\n\n      // const width_corner = x2_corner - x1_corner;\n      // const height_corner = y2_corner - y1_corner;\n      // updateSelectElement(\n      //   id_corner,\n      //   offsetWidth,\n      //   offsetHeight,\n      //   offsetWidth + width_corner,\n      //   offsetHeight + height_corner\n      // );\n    } else if (action === \"resizing\") {\n      const { id, type, position, ...coordinates } = selectedElement;\n      const { x1, y1, x2, y2 } = resizedCoordinates(\n        clientX,\n        clientY,\n        position,\n        coordinates\n      );\n      updateElement(id, x1, y1, x2, y2, tool, \"red\");\n    }\n  };\n  const handleMouseUp = () => {\n    if (selectedElement && elements.length !== 0) {\n      const { id } = selectedElement;\n      // const index = elements.length - 1;\n      // const { id } = elements[index];\n      if (action === \"drawing\" || action === \"resizing\") {\n        // if (action === \"drawing\") {\n        // const { x1, y1, x2, y2 } = adjustElementCoordinates(elements[index]);\n        const { x1, y1, x2, y2 } = adjustElementCoordinates(elements[id]);\n        updateElement(id, x1, y1, x2, y2, \"\");\n      }\n    }\n    // const index = selectedElement.id;\n    // const { id } = selectedElement;\n    // // const index = elements.length - 1;\n    // // const { id } = elements[index];\n    // if (action === \"drawing\" || action === \"resizing\") {\n    //   // if (action === \"drawing\") {\n    //   // const { x1, y1, x2, y2 } = adjustElementCoordinates(elements[index]);\n    //   const { x1, y1, x2, y2 } = adjustElementCoordinates(elements[id]);\n    //   updateElement(id, x1, y1, x2, y2);\n    // }\n    setAction(\"none\");\n\n    // setSelectedElement(null);\n  };\n\n  return (\n    <div>\n      <div style={{ position: \"fixed\" }}>\n        <input\n          type=\"radio\"\n          id=\"Select\"\n          checked={tool === \"Select\"}\n          onChange={() => setTool(\"Select\")}\n        />\n        <label htmlFor=\"Move\">Select</label>\n        {/* <input\n          type=\"radio\"\n          id=\"Move\"\n          checked={tool === \"Move\"}\n          onChange={() => setTool(\"Move\")}\n        />\n        <label htmlFor=\"Move\">Move</label> */}\n        <input\n          type=\"radio\"\n          id=\"draw\"\n          checked={tool === \"draw\"}\n          onChange={() => setTool(\"draw\")}\n        />\n        <label htmlFor=\"draw\">Draw</label>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"Button\"\n          id=\"delete\"\n          onClick={deleteElement}\n        >\n          Delete\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"Button\"\n          id=\"clear\"\n          onClick={clearElements}\n        >\n          Clear\n        </Button>\n\n        <form id=\"form\" onSubmit={saveDrawings}>\n          <label htmlFor=\"text\">Drawing name:</label>\n          <input\n            type=\"text\"\n            id=\"text\"\n            value={drawingName}\n            onChange={handleInputChange}\n          />\n          <Button variant=\"contained\" color=\"primary\" type=\"submit\" id=\"save\">\n            Save\n          </Button>\n        </form>\n        <br />\n        {/* <div>\n          <editModeVisual/>\n        </div> */}\n\n        <div>{editModeVisual}</div>\n        <br />\n        <div>Your saved drawings:</div>\n        <ul>{savedItems}</ul>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"Button\"\n          id=\"Get\"\n          onClick={getSavedElements}\n        >\n          Get\n        </Button>\n      </div>\n      <canvas\n        id=\"canvas\"\n        width={window.innerWidth}\n        height={window.innerHeight}\n        onMouseDown={handleMouseDown}\n        onMouseMove={handleMouseMove}\n        onMouseUp={handleMouseUp}\n      >\n        {\" \"}\n        Canvas\n      </canvas>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}